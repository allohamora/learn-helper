---
import { ClientRouter } from 'astro:transitions';
import { Toaster } from '@/components/ui/toaster';
import { SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/astro/components';
import { ensureUserWordsExists } from '@/repositories/user-word.repository';
import '@/styles/global.css';

type Props = {
  title: string;
};

const { title } = Astro.props;

const { userId } = Astro.locals.auth();
if (!userId) {
  throw new Error('User is not authenticated');
}

await ensureUserWordsExists(userId);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | Learn Helper</title>
    <script is:inline define:vars={{ userId }}>
      window.__USER_ID__ = userId;
    </script>
    <script>
      import * as amplitude from '@amplitude/analytics-browser';
      import { sessionReplayPlugin } from '@amplitude/plugin-session-replay-browser';
      import { PUBLIC_AMPLITUDE_API_KEY } from 'astro:env/client';

      amplitude.add(sessionReplayPlugin());
      amplitude.setUserId((window as unknown as { __USER_ID__: string }).__USER_ID__);

      if (import.meta.env.PROD) {
        amplitude.init(PUBLIC_AMPLITUDE_API_KEY, {
          autocapture: {
            attribution: true,
            fileDownloads: true,
            formInteractions: true,
            pageViews: true,
            sessions: true,
            elementInteractions: true,
            networkTracking: true,
            webVitals: true,
            frustrationInteractions: true,
          },
        });
      }
    </script>
    <script>
      import { scan } from 'react-scan';

      scan({
        enabled: process.env.NODE_ENV === 'development',
      });
    </script>
    <ClientRouter />
    <script>
      const getThemePreference = () => {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };

      const applyTheme = () => {
        const isDark = getThemePreference() === 'dark';
        document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
      };

      document.addEventListener('astro:after-swap', applyTheme);
      applyTheme();
    </script>
  </head>
  <body class="flex min-h-screen min-w-full flex-col">
    <nav
      class="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60"
    >
      <div class="container flex h-14 justify-between">
        <div class="flex items-center space-x-6">
          <a href="/" class="flex items-center space-x-2">
            <img src="/favicon.svg" alt="Learn Helper Logo" class="size-6" />
            <span class="font-bold">Learn Helper</span>
          </a>
          <SignedIn>
            <a href="/words" class="text-foreground transition-colors hover:text-primary"> Words </a>
            <a href="/learning" class="text-foreground transition-colors hover:text-primary"> Learning </a>
            <a href="/discovery" class="text-foreground transition-colors hover:text-primary"> Discovery </a>
          </SignedIn>
        </div>

        <div class="flex items-center">
          <SignedOut>
            <SignInButton mode="modal" />
          </SignedOut>
          <SignedIn>
            <UserButton />
          </SignedIn>
        </div>
      </div>
    </nav>
    <main class="container mt-4 mb-4">
      <slot />
    </main>
    <Toaster client:load />
    <footer class="mt-auto border-t py-6 text-center text-sm text-muted-foreground">
      <p>
        Data powered by
        <a
          href="https://www.oxfordlearnersdictionaries.com/"
          target="_blank"
          rel="noopener noreferrer"
          class="underline hover:text-foreground"
          title="Oxford Learner's Dictionaries">Oxford Learner&apos;s Dictionaries</a
        >
      </p>
    </footer>
  </body>
</html>
